// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package kvs

import (
	"bytes"
	"database/sql/driver"
	"errors"
	"fmt"
	"thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type ConsistencyLevel int64
const (
  ConsistencyLevel_ONE ConsistencyLevel = 0
  ConsistencyLevel_QUORUM ConsistencyLevel = 1
)

func (p ConsistencyLevel) String() string {
  switch p {
  case ConsistencyLevel_ONE: return "ONE"
  case ConsistencyLevel_QUORUM: return "QUORUM"
  }
  return "<UNSET>"
}

func ConsistencyLevelFromString(s string) (ConsistencyLevel, error) {
  switch s {
  case "ONE": return ConsistencyLevel_ONE, nil 
  case "QUORUM": return ConsistencyLevel_QUORUM, nil 
  }
  return ConsistencyLevel(0), fmt.Errorf("not a valid ConsistencyLevel string")
}


func ConsistencyLevelPtr(v ConsistencyLevel) *ConsistencyLevel { return &v }

func (p ConsistencyLevel) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ConsistencyLevel) UnmarshalText(text []byte) error {
q, err := ConsistencyLevelFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ConsistencyLevel) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ConsistencyLevel(v)
return nil
}

func (p * ConsistencyLevel) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - Message
type SystemException struct {
  Message *string `thrift:"message,1" db:"message" json:"message,omitempty"`
}

func NewSystemException() *SystemException {
  return &SystemException{}
}

var SystemException_Message_DEFAULT string
func (p *SystemException) GetMessage() string {
  if !p.IsSetMessage() {
    return SystemException_Message_DEFAULT
  }
return *p.Message
}
func (p *SystemException) IsSetMessage() bool {
  return p.Message != nil
}

func (p *SystemException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SystemException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = &v
}
  return nil
}

func (p *SystemException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SystemException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SystemException) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetMessage() {
    if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
    if err := oprot.WriteString(string(*p.Message)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  }
  return err
}

func (p *SystemException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SystemException(%+v)", *p)
}

func (p *SystemException) Error() string {
  return p.String()
}

// Attributes:
//  - Value
//  - Timestamp
//  - Key
type KVData struct {
  Value string `thrift:"value,1" db:"value" json:"value"`
  Timestamp string `thrift:"timestamp,2" db:"timestamp" json:"timestamp"`
  Key int32 `thrift:"key,3" db:"key" json:"key"`
}

func NewKVData() *KVData {
  return &KVData{}
}


func (p *KVData) GetValue() string {
  return p.Value
}

func (p *KVData) GetTimestamp() string {
  return p.Timestamp
}

func (p *KVData) GetKey() int32 {
  return p.Key
}
func (p *KVData) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *KVData)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *KVData)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Timestamp = v
}
  return nil
}

func (p *KVData)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *KVData) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("KVData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *KVData) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:value: ", p), err) }
  if err := oprot.WriteString(string(p.Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:value: ", p), err) }
  return err
}

func (p *KVData) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("timestamp", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:timestamp: ", p), err) }
  if err := oprot.WriteString(string(p.Timestamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.timestamp (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:timestamp: ", p), err) }
  return err
}

func (p *KVData) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:key: ", p), err) }
  if err := oprot.WriteI32(int32(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:key: ", p), err) }
  return err
}

func (p *KVData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("KVData(%+v)", *p)
}

// Attributes:
//  - ID
//  - IP
//  - Port
type Node struct {
  ID string `thrift:"id,1" db:"id" json:"id"`
  IP string `thrift:"ip,2" db:"ip" json:"ip"`
  Port int32 `thrift:"port,3" db:"port" json:"port"`
}

func NewNode() *Node {
  return &Node{}
}


func (p *Node) GetID() string {
  return p.ID
}

func (p *Node) GetIP() string {
  return p.IP
}

func (p *Node) GetPort() int32 {
  return p.Port
}
func (p *Node) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Node)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *Node)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IP = v
}
  return nil
}

func (p *Node)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Port = v
}
  return nil
}

func (p *Node) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Node"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Node) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteString(string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *Node) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ip", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ip: ", p), err) }
  if err := oprot.WriteString(string(p.IP)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ip (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ip: ", p), err) }
  return err
}

func (p *Node) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("port", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:port: ", p), err) }
  if err := oprot.WriteI32(int32(p.Port)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.port (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:port: ", p), err) }
  return err
}

func (p *Node) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Node(%+v)", *p)
}

type Replica interface {
  // Parameters:
  //  - Key
  //  - CLevel
  Get(key int32, cLevel ConsistencyLevel) (r string, err error)
  // Parameters:
  //  - Key
  //  - Value
  //  - CLevel
  Put(key int32, value string, cLevel ConsistencyLevel) (err error)
  // Parameters:
  //  - Key
  GetDataFromNode(key int32) (r *KVData, err error)
  // Parameters:
  //  - Data
  PutDataInNode(data *KVData) (err error)
  // Parameters:
  //  - Node
  GetHints(node *Node) (r []*KVData, err error)
}

type ReplicaClient struct {
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewReplicaClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ReplicaClient {
  return &ReplicaClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewReplicaClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ReplicaClient {
  return &ReplicaClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

// Parameters:
//  - Key
//  - CLevel
func (p *ReplicaClient) Get(key int32, cLevel ConsistencyLevel) (r string, err error) {
  if err = p.sendGet(key, cLevel); err != nil { return }
  return p.recvGet()
}

func (p *ReplicaClient) sendGet(key int32, cLevel ConsistencyLevel)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("get", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ReplicaGetArgs{
  Key : key,
  CLevel : cLevel,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ReplicaClient) recvGet() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "get" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error1 error
    error1, err = error0.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error1
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get failed: invalid message type")
    return
  }
  result := ReplicaGetResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.SystemException != nil {
    err = result.SystemException
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Key
//  - Value
//  - CLevel
func (p *ReplicaClient) Put(key int32, value string, cLevel ConsistencyLevel) (err error) {
  if err = p.sendPut(key, value, cLevel); err != nil { return }
  return p.recvPut()
}

func (p *ReplicaClient) sendPut(key int32, value string, cLevel ConsistencyLevel)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("put", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ReplicaPutArgs{
  Key : key,
  Value : value,
  CLevel : cLevel,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ReplicaClient) recvPut() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "put" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "put failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "put failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error3 error
    error3, err = error2.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error3
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "put failed: invalid message type")
    return
  }
  result := ReplicaPutResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.SystemException != nil {
    err = result.SystemException
    return 
  }
  return
}

// Parameters:
//  - Key
func (p *ReplicaClient) GetDataFromNode(key int32) (r *KVData, err error) {
  if err = p.sendGetDataFromNode(key); err != nil { return }
  return p.recvGetDataFromNode()
}

func (p *ReplicaClient) sendGetDataFromNode(key int32)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getDataFromNode", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ReplicaGetDataFromNodeArgs{
  Key : key,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ReplicaClient) recvGetDataFromNode() (value *KVData, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getDataFromNode" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getDataFromNode failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getDataFromNode failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error4 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error5 error
    error5, err = error4.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error5
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getDataFromNode failed: invalid message type")
    return
  }
  result := ReplicaGetDataFromNodeResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.SystemException != nil {
    err = result.SystemException
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Data
func (p *ReplicaClient) PutDataInNode(data *KVData) (err error) {
  if err = p.sendPutDataInNode(data); err != nil { return }
  return p.recvPutDataInNode()
}

func (p *ReplicaClient) sendPutDataInNode(data *KVData)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("putDataInNode", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ReplicaPutDataInNodeArgs{
  Data : data,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ReplicaClient) recvPutDataInNode() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "putDataInNode" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "putDataInNode failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "putDataInNode failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error6 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error7 error
    error7, err = error6.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error7
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "putDataInNode failed: invalid message type")
    return
  }
  result := ReplicaPutDataInNodeResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.SystemException != nil {
    err = result.SystemException
    return 
  }
  return
}

// Parameters:
//  - Node
func (p *ReplicaClient) GetHints(node *Node) (r []*KVData, err error) {
  if err = p.sendGetHints(node); err != nil { return }
  return p.recvGetHints()
}

func (p *ReplicaClient) sendGetHints(node *Node)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getHints", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ReplicaGetHintsArgs{
  Node : node,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ReplicaClient) recvGetHints() (value []*KVData, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getHints" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getHints failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getHints failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error8 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error9 error
    error9, err = error8.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error9
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getHints failed: invalid message type")
    return
  }
  result := ReplicaGetHintsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.SystemException != nil {
    err = result.SystemException
    return 
  }
  value = result.GetSuccess()
  return
}


type ReplicaProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler Replica
}

func (p *ReplicaProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *ReplicaProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *ReplicaProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewReplicaProcessor(handler Replica) *ReplicaProcessor {

  self10 := &ReplicaProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self10.processorMap["get"] = &replicaProcessorGet{handler:handler}
  self10.processorMap["put"] = &replicaProcessorPut{handler:handler}
  self10.processorMap["getDataFromNode"] = &replicaProcessorGetDataFromNode{handler:handler}
  self10.processorMap["putDataInNode"] = &replicaProcessorPutDataInNode{handler:handler}
  self10.processorMap["getHints"] = &replicaProcessorGetHints{handler:handler}
return self10
}

func (p *ReplicaProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x11 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x11.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x11

}

type replicaProcessorGet struct {
  handler Replica
}

func (p *replicaProcessorGet) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ReplicaGetArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ReplicaGetResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.Get(args.Key, args.CLevel); err2 != nil {
  switch v := err2.(type) {
    case *SystemException:
  result.SystemException = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get: " + err2.Error())
    oprot.WriteMessageBegin("get", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("get", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type replicaProcessorPut struct {
  handler Replica
}

func (p *replicaProcessorPut) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ReplicaPutArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("put", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ReplicaPutResult{}
  var err2 error
  if err2 = p.handler.Put(args.Key, args.Value, args.CLevel); err2 != nil {
  switch v := err2.(type) {
    case *SystemException:
  result.SystemException = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing put: " + err2.Error())
    oprot.WriteMessageBegin("put", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("put", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type replicaProcessorGetDataFromNode struct {
  handler Replica
}

func (p *replicaProcessorGetDataFromNode) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ReplicaGetDataFromNodeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getDataFromNode", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ReplicaGetDataFromNodeResult{}
var retval *KVData
  var err2 error
  if retval, err2 = p.handler.GetDataFromNode(args.Key); err2 != nil {
  switch v := err2.(type) {
    case *SystemException:
  result.SystemException = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getDataFromNode: " + err2.Error())
    oprot.WriteMessageBegin("getDataFromNode", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getDataFromNode", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type replicaProcessorPutDataInNode struct {
  handler Replica
}

func (p *replicaProcessorPutDataInNode) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ReplicaPutDataInNodeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("putDataInNode", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ReplicaPutDataInNodeResult{}
  var err2 error
  if err2 = p.handler.PutDataInNode(args.Data); err2 != nil {
  switch v := err2.(type) {
    case *SystemException:
  result.SystemException = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing putDataInNode: " + err2.Error())
    oprot.WriteMessageBegin("putDataInNode", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("putDataInNode", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type replicaProcessorGetHints struct {
  handler Replica
}

func (p *replicaProcessorGetHints) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ReplicaGetHintsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getHints", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ReplicaGetHintsResult{}
var retval []*KVData
  var err2 error
  if retval, err2 = p.handler.GetHints(args.Node); err2 != nil {
  switch v := err2.(type) {
    case *SystemException:
  result.SystemException = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getHints: " + err2.Error())
    oprot.WriteMessageBegin("getHints", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getHints", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Key
//  - CLevel
type ReplicaGetArgs struct {
  Key int32 `thrift:"key,1" db:"key" json:"key"`
  CLevel ConsistencyLevel `thrift:"cLevel,2" db:"cLevel" json:"cLevel"`
}

func NewReplicaGetArgs() *ReplicaGetArgs {
  return &ReplicaGetArgs{}
}


func (p *ReplicaGetArgs) GetKey() int32 {
  return p.Key
}

func (p *ReplicaGetArgs) GetCLevel() ConsistencyLevel {
  return p.CLevel
}
func (p *ReplicaGetArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReplicaGetArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *ReplicaGetArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := ConsistencyLevel(v)
  p.CLevel = temp
}
  return nil
}

func (p *ReplicaGetArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReplicaGetArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteI32(int32(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *ReplicaGetArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("cLevel", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:cLevel: ", p), err) }
  if err := oprot.WriteI32(int32(p.CLevel)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cLevel (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:cLevel: ", p), err) }
  return err
}

func (p *ReplicaGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReplicaGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - SystemException
type ReplicaGetResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  SystemException *SystemException `thrift:"systemException,1" db:"systemException" json:"systemException,omitempty"`
}

func NewReplicaGetResult() *ReplicaGetResult {
  return &ReplicaGetResult{}
}

var ReplicaGetResult_Success_DEFAULT string
func (p *ReplicaGetResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return ReplicaGetResult_Success_DEFAULT
  }
return *p.Success
}
var ReplicaGetResult_SystemException_DEFAULT *SystemException
func (p *ReplicaGetResult) GetSystemException() *SystemException {
  if !p.IsSetSystemException() {
    return ReplicaGetResult_SystemException_DEFAULT
  }
return p.SystemException
}
func (p *ReplicaGetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ReplicaGetResult) IsSetSystemException() bool {
  return p.SystemException != nil
}

func (p *ReplicaGetResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReplicaGetResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ReplicaGetResult)  ReadField1(iprot thrift.TProtocol) error {
  p.SystemException = &SystemException{}
  if err := p.SystemException.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
  }
  return nil
}

func (p *ReplicaGetResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReplicaGetResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ReplicaGetResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSystemException() {
    if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:systemException: ", p), err) }
    if err := p.SystemException.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:systemException: ", p), err) }
  }
  return err
}

func (p *ReplicaGetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReplicaGetResult(%+v)", *p)
}

// Attributes:
//  - Key
//  - Value
//  - CLevel
type ReplicaPutArgs struct {
  Key int32 `thrift:"key,1" db:"key" json:"key"`
  Value string `thrift:"value,2" db:"value" json:"value"`
  CLevel ConsistencyLevel `thrift:"cLevel,3" db:"cLevel" json:"cLevel"`
}

func NewReplicaPutArgs() *ReplicaPutArgs {
  return &ReplicaPutArgs{}
}


func (p *ReplicaPutArgs) GetKey() int32 {
  return p.Key
}

func (p *ReplicaPutArgs) GetValue() string {
  return p.Value
}

func (p *ReplicaPutArgs) GetCLevel() ConsistencyLevel {
  return p.CLevel
}
func (p *ReplicaPutArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReplicaPutArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *ReplicaPutArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *ReplicaPutArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := ConsistencyLevel(v)
  p.CLevel = temp
}
  return nil
}

func (p *ReplicaPutArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("put_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReplicaPutArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteI32(int32(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *ReplicaPutArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err) }
  if err := oprot.WriteString(string(p.Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err) }
  return err
}

func (p *ReplicaPutArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("cLevel", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:cLevel: ", p), err) }
  if err := oprot.WriteI32(int32(p.CLevel)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cLevel (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:cLevel: ", p), err) }
  return err
}

func (p *ReplicaPutArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReplicaPutArgs(%+v)", *p)
}

// Attributes:
//  - SystemException
type ReplicaPutResult struct {
  SystemException *SystemException `thrift:"systemException,1" db:"systemException" json:"systemException,omitempty"`
}

func NewReplicaPutResult() *ReplicaPutResult {
  return &ReplicaPutResult{}
}

var ReplicaPutResult_SystemException_DEFAULT *SystemException
func (p *ReplicaPutResult) GetSystemException() *SystemException {
  if !p.IsSetSystemException() {
    return ReplicaPutResult_SystemException_DEFAULT
  }
return p.SystemException
}
func (p *ReplicaPutResult) IsSetSystemException() bool {
  return p.SystemException != nil
}

func (p *ReplicaPutResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReplicaPutResult)  ReadField1(iprot thrift.TProtocol) error {
  p.SystemException = &SystemException{}
  if err := p.SystemException.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
  }
  return nil
}

func (p *ReplicaPutResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("put_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReplicaPutResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSystemException() {
    if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:systemException: ", p), err) }
    if err := p.SystemException.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:systemException: ", p), err) }
  }
  return err
}

func (p *ReplicaPutResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReplicaPutResult(%+v)", *p)
}

// Attributes:
//  - Key
type ReplicaGetDataFromNodeArgs struct {
  Key int32 `thrift:"key,1" db:"key" json:"key"`
}

func NewReplicaGetDataFromNodeArgs() *ReplicaGetDataFromNodeArgs {
  return &ReplicaGetDataFromNodeArgs{}
}


func (p *ReplicaGetDataFromNodeArgs) GetKey() int32 {
  return p.Key
}
func (p *ReplicaGetDataFromNodeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReplicaGetDataFromNodeArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *ReplicaGetDataFromNodeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getDataFromNode_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReplicaGetDataFromNodeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteI32(int32(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *ReplicaGetDataFromNodeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReplicaGetDataFromNodeArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - SystemException
type ReplicaGetDataFromNodeResult struct {
  Success *KVData `thrift:"success,0" db:"success" json:"success,omitempty"`
  SystemException *SystemException `thrift:"systemException,1" db:"systemException" json:"systemException,omitempty"`
}

func NewReplicaGetDataFromNodeResult() *ReplicaGetDataFromNodeResult {
  return &ReplicaGetDataFromNodeResult{}
}

var ReplicaGetDataFromNodeResult_Success_DEFAULT *KVData
func (p *ReplicaGetDataFromNodeResult) GetSuccess() *KVData {
  if !p.IsSetSuccess() {
    return ReplicaGetDataFromNodeResult_Success_DEFAULT
  }
return p.Success
}
var ReplicaGetDataFromNodeResult_SystemException_DEFAULT *SystemException
func (p *ReplicaGetDataFromNodeResult) GetSystemException() *SystemException {
  if !p.IsSetSystemException() {
    return ReplicaGetDataFromNodeResult_SystemException_DEFAULT
  }
return p.SystemException
}
func (p *ReplicaGetDataFromNodeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ReplicaGetDataFromNodeResult) IsSetSystemException() bool {
  return p.SystemException != nil
}

func (p *ReplicaGetDataFromNodeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReplicaGetDataFromNodeResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &KVData{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ReplicaGetDataFromNodeResult)  ReadField1(iprot thrift.TProtocol) error {
  p.SystemException = &SystemException{}
  if err := p.SystemException.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
  }
  return nil
}

func (p *ReplicaGetDataFromNodeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getDataFromNode_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReplicaGetDataFromNodeResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ReplicaGetDataFromNodeResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSystemException() {
    if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:systemException: ", p), err) }
    if err := p.SystemException.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:systemException: ", p), err) }
  }
  return err
}

func (p *ReplicaGetDataFromNodeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReplicaGetDataFromNodeResult(%+v)", *p)
}

// Attributes:
//  - Data
type ReplicaPutDataInNodeArgs struct {
  Data *KVData `thrift:"data,1" db:"data" json:"data"`
}

func NewReplicaPutDataInNodeArgs() *ReplicaPutDataInNodeArgs {
  return &ReplicaPutDataInNodeArgs{}
}

var ReplicaPutDataInNodeArgs_Data_DEFAULT *KVData
func (p *ReplicaPutDataInNodeArgs) GetData() *KVData {
  if !p.IsSetData() {
    return ReplicaPutDataInNodeArgs_Data_DEFAULT
  }
return p.Data
}
func (p *ReplicaPutDataInNodeArgs) IsSetData() bool {
  return p.Data != nil
}

func (p *ReplicaPutDataInNodeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReplicaPutDataInNodeArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Data = &KVData{}
  if err := p.Data.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Data), err)
  }
  return nil
}

func (p *ReplicaPutDataInNodeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("putDataInNode_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReplicaPutDataInNodeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("data", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:data: ", p), err) }
  if err := p.Data.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Data), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:data: ", p), err) }
  return err
}

func (p *ReplicaPutDataInNodeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReplicaPutDataInNodeArgs(%+v)", *p)
}

// Attributes:
//  - SystemException
type ReplicaPutDataInNodeResult struct {
  SystemException *SystemException `thrift:"systemException,1" db:"systemException" json:"systemException,omitempty"`
}

func NewReplicaPutDataInNodeResult() *ReplicaPutDataInNodeResult {
  return &ReplicaPutDataInNodeResult{}
}

var ReplicaPutDataInNodeResult_SystemException_DEFAULT *SystemException
func (p *ReplicaPutDataInNodeResult) GetSystemException() *SystemException {
  if !p.IsSetSystemException() {
    return ReplicaPutDataInNodeResult_SystemException_DEFAULT
  }
return p.SystemException
}
func (p *ReplicaPutDataInNodeResult) IsSetSystemException() bool {
  return p.SystemException != nil
}

func (p *ReplicaPutDataInNodeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReplicaPutDataInNodeResult)  ReadField1(iprot thrift.TProtocol) error {
  p.SystemException = &SystemException{}
  if err := p.SystemException.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
  }
  return nil
}

func (p *ReplicaPutDataInNodeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("putDataInNode_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReplicaPutDataInNodeResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSystemException() {
    if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:systemException: ", p), err) }
    if err := p.SystemException.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:systemException: ", p), err) }
  }
  return err
}

func (p *ReplicaPutDataInNodeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReplicaPutDataInNodeResult(%+v)", *p)
}

// Attributes:
//  - Node
type ReplicaGetHintsArgs struct {
  Node *Node `thrift:"node,1" db:"node" json:"node"`
}

func NewReplicaGetHintsArgs() *ReplicaGetHintsArgs {
  return &ReplicaGetHintsArgs{}
}

var ReplicaGetHintsArgs_Node_DEFAULT *Node
func (p *ReplicaGetHintsArgs) GetNode() *Node {
  if !p.IsSetNode() {
    return ReplicaGetHintsArgs_Node_DEFAULT
  }
return p.Node
}
func (p *ReplicaGetHintsArgs) IsSetNode() bool {
  return p.Node != nil
}

func (p *ReplicaGetHintsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReplicaGetHintsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Node = &Node{}
  if err := p.Node.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Node), err)
  }
  return nil
}

func (p *ReplicaGetHintsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getHints_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReplicaGetHintsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("node", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:node: ", p), err) }
  if err := p.Node.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Node), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:node: ", p), err) }
  return err
}

func (p *ReplicaGetHintsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReplicaGetHintsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - SystemException
type ReplicaGetHintsResult struct {
  Success []*KVData `thrift:"success,0" db:"success" json:"success,omitempty"`
  SystemException *SystemException `thrift:"systemException,1" db:"systemException" json:"systemException,omitempty"`
}

func NewReplicaGetHintsResult() *ReplicaGetHintsResult {
  return &ReplicaGetHintsResult{}
}

var ReplicaGetHintsResult_Success_DEFAULT []*KVData

func (p *ReplicaGetHintsResult) GetSuccess() []*KVData {
  return p.Success
}
var ReplicaGetHintsResult_SystemException_DEFAULT *SystemException
func (p *ReplicaGetHintsResult) GetSystemException() *SystemException {
  if !p.IsSetSystemException() {
    return ReplicaGetHintsResult_SystemException_DEFAULT
  }
return p.SystemException
}
func (p *ReplicaGetHintsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ReplicaGetHintsResult) IsSetSystemException() bool {
  return p.SystemException != nil
}

func (p *ReplicaGetHintsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReplicaGetHintsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*KVData, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem12 := &KVData{}
    if err := _elem12.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem12), err)
    }
    p.Success = append(p.Success, _elem12)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ReplicaGetHintsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.SystemException = &SystemException{}
  if err := p.SystemException.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
  }
  return nil
}

func (p *ReplicaGetHintsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getHints_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReplicaGetHintsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ReplicaGetHintsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSystemException() {
    if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:systemException: ", p), err) }
    if err := p.SystemException.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:systemException: ", p), err) }
  }
  return err
}

func (p *ReplicaGetHintsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReplicaGetHintsResult(%+v)", *p)
}


